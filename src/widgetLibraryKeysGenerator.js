const utility = require('./utilityModule');
const jsonminify = require('jsonminify');
const pathForEnglishModel = '././input/labels-supervisor/en/supervisor.json';

module.exports = {
  createKeyLabelJSON,
};

/** This function will create an elementary object which will have as key an element from
 *  the metadataTranslatorModel.json and as value the coresponding element from the en/supervisor.json from node_modules
 *
 * @param {String} key
 * @param {String} value
 * @return {JSON}
 * @private
 */
function createInnerObject( key, value) {
  const resultJSON = {};

  resultJSON['key'] = key;
  resultJSON['label'] = value;

  return resultJSON;
}

/** This function will create an array of inner objects, using the objects created by the function 'createInnerObject'. The Array generated by this function will be
 * that one which will be the value for a key in the main JSON generated by this module
 *
 * @param {JSON} englishModel
 * @param {String} partialValue
 * @return {JSON}
 * @private
 */
function createValueArray(englishModel, partialValue) {
  const resultArray = [];
  for ( const itr in englishModel ) {
    if ( itr.startsWith( partialValue ) ) {
      resultArray.push( createInnerObject( itr, englishModel[itr]) );
    }
  }

  return resultArray;
}

/** This function will create the main JSON for of this module.
 *
 * @param {String} inputPath
 * @return {JSON}
 * @public
 */
function createKeyLabelJSON( inputPath ) {
  const finalJSON = {};
  const keyLabelInputJSON = utility.parseJSONFile( inputPath );
  const englishModel = utility.parseJSONFile(pathForEnglishModel);

  Object.keys( keyLabelInputJSON ).forEach( (key) => {
    finalJSON[key] = createValueArray(englishModel, keyLabelInputJSON[key]);
  }
  );

  finalJSON['dateOfGeneration'] = utility.dateOfProgramExecution();
  return jsonminify( JSON.stringify( finalJSON ));
}
